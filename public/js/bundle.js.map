{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/actions/AddBranchActions.js","app/actions/AddTrunkActions.js","app/actions/BranchShowActions.js","app/actions/NavbarActions.js","app/actions/TrunkActions.js","app/actions/TrunkShowActions.js","app/alt.js","app/components/AddBranch.js","app/components/AddTrunk.js","app/components/App.js","app/components/BranchShow.js","app/components/Home.js","app/components/Navbar.js","app/components/Trunk.js","app/components/TrunkComplete.js","app/components/TrunkShow.js","app/main.js","app/routes.js","app/stores/AddBranchStore.js","app/stores/AddTrunkStore.js","app/stores/BranchShowStore.js","app/stores/NavbarStore.js","app/stores/TrunkShowStore.js","app/stores/TrunkStore.js","node_modules/deep-equal/index.js","node_modules/deep-equal/lib/is_arguments.js","node_modules/deep-equal/lib/keys.js","node_modules/history/lib/Actions.js","node_modules/history/lib/AsyncUtils.js","node_modules/history/lib/DOMStateStorage.js","node_modules/history/lib/DOMUtils.js","node_modules/history/lib/ExecutionEnvironment.js","node_modules/history/lib/createBrowserHistory.js","node_modules/history/lib/createDOMHistory.js","node_modules/history/lib/createHistory.js","node_modules/history/lib/createLocation.js","node_modules/history/lib/deprecate.js","node_modules/history/lib/extractPath.js","node_modules/history/lib/parsePath.js","node_modules/history/lib/runTransitionHook.js","node_modules/invariant/browser.js","node_modules/process/browser.js","node_modules/warning/browser.js"],"names":[],"mappings":"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,cAAI,WAAJ,CAAgB,WAAhB,C;;;;;;;;;;;AC5Cf;;;;AACA;;;;;;;;IAEM,c;AACJ,4BAAc;AAAA;;AACZ,SAAK,WAAL;AACA,SAAK,OAAL,GAAe,CAAf;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,IAAL,GAAY,KAAZ;AACA,SAAK,QAAL,GAAgB,EAAhB;AACD;;;;0CAEqB,I,EAAM;AAC1B,WAAK,KAAL,GAAa,KAAK,CAAL,EAAQ,KAArB;AACA,WAAK,IAAL,GAAY,KAAK,CAAL,EAAQ,IAApB;AACA,WAAK,QAAL,GAAgB,KAAK,CAAL,CAAhB;AACD;;;uCAEkB,K,EAAO;AACxB,aAAO,KAAP,CAAa,MAAM,YAAN,CAAmB,OAAhC;AACD;;;;;;kBAIY,cAAI,WAAJ,CAAgB,cAAhB,C;;;;;;;;;;;ACxBf;;;;AACA;;;;;;;;IAEM,U;AACJ,wBAAc;AAAA;;AACZ,SAAK,WAAL;AACA,SAAK,MAAL,GAAc,EAAd;AACD;;;;uCAEkB,I,EAAM;AACvB,WAAK,MAAL,GAAc,IAAd;AACD;;;oCAEe,Y,EAAc;AAC5B,aAAO,KAAP,CAAa,YAAb;AACD;;;;;;kBAIY,cAAI,WAAJ,CAAgB,UAAhB,C;;;ACnBf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvlSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnpLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import alt from '../alt';\n\nclass AddBranchActions {\n  constructor() {\n    this.generateActions(\n        'addBranchSuccess',\n        'addBranchFail',\n        'updateParent',\n        'updateTitle',\n        'updateBody',\n        'invalidTitle',\n        'invalidBody',\n      )\n  }\n\n  addBranch(parent, title, body) {\n    $.ajax({\n      type: 'POST',\n      url: '/api/branches/new',\n      data: { parent: parent, title: title, body: body }\n    })\n      .done((data) => {\n        this.actions.addBranchSuccess(data.message);\n      })\n      .fail((jqXhr) => {\n        this.actions.addBranchFail(jqXhr.responseJSON.message);\n      })\n  }\n}\n\nexport default alt.createActions(AddBranchActions);\n  \n ","import alt from '../alt';\n\nclass AddTrunkActions {\n  constructor() {\n    this.generateActions(\n      'addTrunkSuccess',\n      'addTrunkFail',\n      'updateTitle',\n      'updateBody',\n      'invalidTitle',\n      'invalidBody'\n    );\n  }\n\n  addTrunk(title, body) {\n    $.ajax({\n      type: 'POST',\n      url: '/api/trunks/new',\n      data: { title: title, body: body }\n    })\n      .done((data) => {\n        this.actions.addTrunkSuccess(data.message);\n      })\n      .fail((jqXhr) => {\n        this.actions.addTrunkFail(jqXhr.responseJSON.message);\n      });\n  }\n}\n\nexport default alt.createActions(AddTrunkActions);","import alt from '../alt';\n\nclass BranchShowActions {\n  constructor() {\n    this.generateActions(\n      'getBranchShowSuccess',\n      'getBranchShowFail'\n    );\n  }\n\n  getBranchShow(branchId) {\n    $.ajax({ url: '/api/branches/' + branchId })\n      .done((data) => {\n        this.actions.getBranchShowSuccess(data);\n      })\n      .fail((jqXhr) => {\n        this.actions.getBranchShowFail(jqXhr);\n      });\n  }\n\n}\n\nexport default alt.createActions(BranchShowActions);","import alt from '../alt';\nimport {assign} from 'underscore';\n\nclass NavbarActions {\n  constructor() {\n    this.generateActions(\n      'updateOnlineUsers',\n      'updateAjaxAnimation',\n      'updateSearchQuery',\n      'getCharacterCountSuccess',\n      'getCharacterCountFail',\n      'findCharacterSuccess',\n      'findCharacterFail'\n    );\n  }\n\n  findCharacter(payload) {\n    $.ajax({\n      url: '/api/characters/search',\n      data: { name: payload.searchQuery }\n    })\n      .done((data) => {\n        assign(payload, data);\n        this.actions.findCharacterSuccess(payload);\n      })\n      .fail(() => {\n        this.actions.findCharacterFail(payload);\n      });\n  }\n\n  getCharacterCount() {\n    $.ajax({ url: '/api/characters/count' })\n      .done((data) => {\n        this.actions.getCharacterCountSuccess(data)\n      })\n      .fail((jqXhr) => {\n        this.actions.getCharacterCountFail(jqXhr)\n      });\n  }\n}\n\nexport default alt.createActions(NavbarActions);","import alt from '../alt';\n\nclass TrunkActions {\n  constructor() {\n    this.generateActions(\n      'getTrunksSuccess',\n      'getTrunksFail',\n    );\n  }\n\n  getTrunks() {\n    $.ajax({ url: '/api/trunks' })\n      .done(data => {\n        this.actions.getTrunksSuccess(data);\n      })\n      .fail(jqXhr => {\n        this.actions.getTrunksFail(jqXhr.responseJSON.message);\n      });\n  }\n\n}\n\nexport default alt.createActions(TrunkActions);","import alt from '../alt';\n\nclass TrunkShowActions {\n  constructor() {\n    this.generateActions(\n      'getTrunkShowSuccess',\n      'getTrunkShowFail'\n    );\n  }\n\n  getTrunkShow(trunkId) {\n    $.ajax({ url: '/api/trunks/' + trunkId })\n      .done((data) => {\n        this.actions.getTrunkShowSuccess(data);\n      })\n      .fail((jqXhr) => {\n        this.actions.getTrunkShowFail(jqXhr);\n      });\n  }\n\n}\n\nexport default alt.createActions(TrunkShowActions);","import Alt from 'alt';\n\nexport default new Alt();","import React from 'react';\nimport AddBranchStore from '../stores/AddBranchStore';\nimport AddBranchActions from '../actions/AddBranchActions';\nimport TrunkShowActions from '../actions/TrunkShowActions';\nimport BranchShowActions from '../actions/BranchShowActions';\n\nclass AddBranch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = AddBranchStore.getState();\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    AddBranchStore.listen(this.onChange);\n  }\n\n  componentWillUnmount() {\n    AddBranchStore.unlisten(this.onChange);\n  }\n\n  onChange(state) {\n    this.setState(state);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    var parent = this.props.props.params.id;\n    var title = this.state.title.trim();\n    var body = this.state.body;\n\n    if (!title) {\n      AddBranchActions.invalidTitle();\n    }\n\n    if (!body) {\n      AddBranchActions.invalidBody();\n    }\n\n    if (title && body) {\n      AddBranchActions.addBranch(parent, title, body);\n      if (this.props.props.route.path === \"/trunks/:id\") {\n        TrunkShowActions.getTrunkShow(this.props.props.params.id);\n      } else {\n        BranchShowActions.getBranchShow(this.props.props.params.id);\n      }\n\n    }\n\n  }\n  \n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit.bind(this)}>\n          <div className={'form-group ' + this.state.nameValidationState}>\n            <label className='control-label'>Title</label>\n            <input type='text' className='form-control' ref='titleTextField' value={this.state.title}\n                   onChange={AddBranchActions.updateTitle} autoFocus/>\n            <span className='help-block'>{this.state.helpBlock}</span>\n          </div>\n          <div className={'form-group ' + this.state.bodyValidationState}>\n            <textarea value={this.state.body} onChange={AddBranchActions.updateBody} />\n          </div>\n          <button type='submit' className='btn btn-primary'>Submit</button>\n        </form> \n      </div>\n      )\n  }\n\n}\n\nexport default AddBranch;\n","import React from 'react';\nimport AddTrunkStore from '../stores/AddTrunkStore';\nimport AddTrunkActions from '../actions/AddTrunkActions';\n\nclass AddTrunk extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = AddTrunkStore.getState();\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    AddTrunkStore.listen(this.onChange);\n  }\n\n  componentWillUnmount() {\n    AddTrunkStore.unlisten(this.onChange);\n  }\n\n  onChange(state) {\n    this.setState(state);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    var title = this.state.title.trim();\n    var body = this.state.body;\n\n    if (!title) {\n      AddTrunkActions.invalidTitle();\n      this.refs.titleTextField.getDOMNode().focus();\n    }\n\n    if (!body) {\n      AddTrunkActions.invalidBody();\n    }\n\n    if (title && body) {\n      AddTrunkActions.addTrunk(title, body);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit.bind(this)}>\n          <div className={'form-group ' + this.state.nameValidationState}>\n            <label className='control-label'>Title</label>\n            <input type='text' className='form-control' ref='titleTextField' value={this.state.title}\n                   onChange={AddTrunkActions.updateTitle} autoFocus/>\n            <span className='help-block'>{this.state.helpBlock}</span>\n          </div>\n          <div className={'form-group ' + this.state.bodyValidationState}>\n            <div className='radio radio-inline'>\n              <input type='text' className='form-control' ref='bodyTextField' value={this.state.body}\n                     onChange={AddTrunkActions.updateBody}/>\n            </div>\n          </div>\n          <button type='submit' className='btn btn-primary'>Submit</button>\n        </form> \n      </div>\n      )\n  }\n\n}\n\nexport default AddTrunk;","import React from 'react';\nimport Navbar from './Navbar';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Navbar history={this.props.history} />\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport {Link} from 'react-router';\nimport BranchShowStore from '../stores/BranchShowStore';\nimport BranchShowActions from '../actions/BranchShowActions';\nimport AddBranch from './AddBranch';\n\nclass TrunkShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = BranchShowStore.getState();\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    BranchShowStore.listen(this.onChange);\n    BranchShowActions.getBranchShow(this.props.params.id);\n  }\n\n  componentWillUnmount() {\n    BranchShowStore.unlisten(this.onChange);\n  }\n\n  componentDidUpdate(prevProps) {\n  }\n\n  onChange(state) {\n    this.setState(state);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    BranchShowActions.getBranchShow(nextProps.params.id);\n  }\n\n\n\n  render() {\n    console.log(this.state)\n    return (\n      <div>\n        <h2><strong>{this.state.title}</strong></h2>\n        <h4>{this.state.body}</h4>\n        <div className='container'>\n          <h2 className='text-center'>Branches</h2>\n          <div>\n            { this.state.branches.map((branch, index)  =>  {\n              return (\n                <div key={branch._id} >               \n                  <div className='post-container'>\n                    <h4 className='title'>{branch.title}</h4>\n                    <div className='body'>{branch.body}</div>\n                    <Link to={'/branches/' + branch._id} className='branches-link'>See branches</Link>\n                  </div>\n                </div>\n              );\n              })\n            }\n          </div>\n        </div>\n        <AddBranch props={this.props} />\n      </div>\n    );\n  }\n}\n\nexport default TrunkShow;","import React from 'react';\nimport Trunk from './Trunk.js';\nimport AddTrunk from './AddTrunk.js';\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <div>\n        <Trunk />\n        <AddTrunk />\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React from 'react';\nimport {Link} from 'react-router';\nimport NavbarStore from '../stores/NavbarStore';\nimport NavbarActions from '../actions/NavbarActions';\n\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = NavbarStore.getState();\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    NavbarStore.listen(this.onChange);\n    NavbarActions.getCharacterCount();\n\n    let socket = io.connect();\n\n    socket.on('onlineUsers', (data) => {\n      NavbarActions.updateOnlineUsers(data);\n    });\n\n    $(document).ajaxStart(() => {\n      NavbarActions.updateAjaxAnimation('fadeIn');\n    });\n\n    $(document).ajaxComplete(() => {\n      setTimeout(() => {\n        NavbarActions.updateAjaxAnimation('fadeOut');\n      }, 750);\n    });\n  }\n\n  componentWillUnmount() {\n    NavbarStore.unlisten(this.onChange);\n  }\n\n  onChange(state) {\n    this.setState(state);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    let searchQuery = this.state.searchQuery.trim();\n\n    if (searchQuery) {\n      NavbarActions.findCharacter({\n        searchQuery: searchQuery,\n        searchForm: this.refs.searchForm,\n        history: this.props.history\n      });\n    }\n  }\n\n  render() {\n    return (\n<nav className='navbar navbar-default navbar-static-top'>\n        <div className='navbar-header'>\n          <button type='button' className='navbar-toggle collapsed' data-toggle='collapse' data-target='#navbar'>\n            <span className='sr-only'>Toggle navigation</span>\n            <span className='icon-bar'></span>\n            <span className='icon-bar'></span>\n            <span className='icon-bar'></span>\n          </button>\n          <Link to='/' className='navbar-brand'>\n            <span ref='triangles' className={'triangles animated ' + this.state.ajaxAnimationClass}>\n              <div className='tri invert'></div>\n              <div className='tri invert'></div>\n              <div className='tri'></div>\n              <div className='tri invert'></div>\n              <div className='tri invert'></div>\n              <div className='tri'></div>\n              <div className='tri invert'></div>\n              <div className='tri'></div>\n              <div className='tri invert'></div>\n            </span>\n            STEM\n            <span className='badge badge-up badge-danger'>{this.state.onlineUsers}</span>\n          </Link>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;","import React from 'react';\nimport {Link} from 'react-router';\nimport TrunkStore from '../stores/TrunkStore'\nimport TrunkActions from '../actions/TrunkActions';\nimport {first, without, findWhere} from 'underscore';\n\nclass Trunk extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = TrunkStore.getState();\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    TrunkStore.listen(this.onChange);\n    TrunkActions.getTrunks();\n  }\n\n  componentWillUnmount() {\n    TrunkStore.unlisten(this.onChange);\n  }\n\n  onChange(state) {\n    this.setState(state);\n  }\n\n  handleClick(trunk) {\n  }\n\n  render() {\n    return (\n      <div>\n        <h2 className='text-center'>Trunks</h2>\n        <div>\n          { this.state.trunks.map((trunk, index)  =>  {\n            return (\n              <div key={trunk._id} >\n                <div className='post-container'>\n                  <h4 className=\"title\">{trunk.title}</h4>\n                  <div className=\"body\">{trunk.body}</div>\n                  <Link to={'/trunks/' + trunk._id} className=\"branches-link\">See branches</Link>\n                  <div className='avatar'></div>\n                  <div className='branches'>x<span className='badge'>15</span></div>\n                  <div className='stars'>&#9733;<span className='badge'>10</span></div>\n                </div>\n              </div>\n            );\n            })\n          }\n        </div>\n      </div>\n    );\n  } \n}\n\nexport default Trunk;","import React from 'react';\nimport TrunkShow from './TrunkShow.js';\nimport AddBranch from './AddBranch.js';\n\nclass TrunkComplete extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <TrunkShow props={this.props} />\n        <AddBranch props={this.props} />\n      </div>\n    );\n  }\n}\n\nexport default TrunkComplete;\n\n","import React from 'react';\nimport {Link} from 'react-router';\nimport TrunkShowStore from '../stores/TrunkShowStore';\nimport TrunkShowActions from '../actions/TrunkShowActions'\nimport AddBranch from './AddBranch';\n\nclass TrunkShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = TrunkShowStore.getState();\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    TrunkShowStore.listen(this.onChange);\n    TrunkShowActions.getTrunkShow(this.props.params.id);\n  }\n\n  componentWillUnmount() {\n    TrunkShowStore.unlisten(this.onChange);\n  }\n\n  componentDidUpdate(prevProps) {\n  }\n\n  onChange(state) {\n    this.setState(state);\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>{this.state.title}</h2>\n        <h4>{this.state.body}</h4>\n        <div>\n          <h2 className='text-center'>Branches</h2>\n          <div>\n            { this.state.branches.map((branch, index)  =>  {\n              return (\n                <div key={branch._id} >\n                  <div className='post-container'>\n                    <h3 className='title'>{branch.title}</h3>\n                    <div className='body'>{branch.body}</div>\n                    <Link to={'/branches/' + branch._id} className='branches-link'>See branches</Link>\n                  </div>\n                </div>\n              );\n              })\n            }\n          </div>\n        </div>\n        <AddBranch props={this.props} />\n      </div>\n    );\n  }\n}\n\nexport default TrunkShow;","import React from 'react';\nimport Router from 'react-router';\nimport ReactDOM from 'react-dom';\nimport createBrowserHistory from 'history/lib/createBrowserHistory';\nimport routes from './routes';\n\nlet history = createBrowserHistory();\n\nReactDOM.render(<Router history={history}>{routes}</Router>, document.getElementById('app'));","import React from 'react';\nimport {Route} from 'react-router';\nimport App from './components/App';\nimport Home from './components/Home';\nimport AddTrunk from './components/AddTrunk';\nimport TrunkShow from './components/TrunkShow';\nimport TrunkComplete from './components/TrunkComplete';\nimport BranchShow from './components/BranchShow';\n\nexport default (\n  <Route component={App}>\n    <Route path='/' component={Home} />\n    <Route path='/trunks/:id' component={TrunkShow} />\n    <Route path='/branches/:id' component={BranchShow} />\n  </Route>\n);","import alt from '../alt';\nimport AddBranchActions from '../actions/AddBranchActions';\n\nclass AddBranchStore {\n  constructor() {\n    this.bindActions(AddBranchActions);\n    this.parent = '';\n    this.title = '';\n    this.body = '';\n    this.helpBlock = '';\n    this.titleValidationState = '';\n    this.bodyValidationState = '';\n  }\n  onAddBranchSuccess(successMessage) {\n    this.titleValidationState = 'has-success';\n    this.helpBlock = successMessage;\n  }\n\n  onAddBranchFail(errorMessage) {\n    this.titleValidationState = 'has-error';\n    this.helpBlock = errorMessage;\n  }\n\n  onUpdateParent(event) {\n    this.parent = event.target.value;\n  }\n\n  onUpdateTitle(event) {\n    this.title = event.target.value;\n    this.titleValidationState = '';\n    this.helpBlock = '';\n  }\n\n  onUpdateBody(event) {\n    this.body = event.target.value;\n    this.bodyValidationState = '';\n  }\n\n  onInvalidTitle() {\n    this.titleValidationState = 'has-error';\n    this.helpBlock = 'Please enter a title.';\n  }\n\n  onInvalidBody() {\n    this.bodyValidationState = 'has-error';\n  }\n\n}\n\nexport default alt.createStore(AddBranchStore);\n","import alt from '../alt';\nimport AddTrunkActions from '../actions/AddTrunkActions';\n\nclass AddTrunkStore {\n  constructor() {\n    this.bindActions(AddTrunkActions);\n    this.title = '';\n    this.body = '';\n    this.helpBlock = '';\n    this.titleValidationState = '';\n    this.bodyValidationState = '';\n  }\n\n  onAddTrunkSuccess(successMessage) {\n    this.titleValidationState = 'has-success';\n    this.helpBlock = successMessage;\n  }\n\n  onAddTrunkFail(errorMessage) {\n    this.titleValidationState = 'has-error';\n    this.helpBlock = errorMessage;\n  }\n\n  onUpdateTitle(event) {\n    this.title = event.target.value;\n    this.titleValidationState = '';\n    this.helpBlock = '';\n  }\n\n  onUpdateBody(event) {\n    this.body = event.target.value;\n    this.bodyValidationState = '';\n  }\n\n  onInvalidTitle() {\n    this.titleValidationState = 'has-error';\n    this.helpBlock = 'Please enter a title.';\n  }\n\n  onInvalidBody() {\n    this.bodyValidationState = 'has-error';\n  }\n}\n\nexport default alt.createStore(AddTrunkStore);","import alt from '../alt';\nimport BranchShowActions from '../actions/BranchShowActions';\n\nclass BranchShowStore {\n  constructor() {\n    this.bindActions(BranchShowActions);\n    this.parent_id = '';\n    this.branchId = 0;\n    this.title = 'TBD';\n    this.body = 'TBD';\n    this.branches = [];\n  }\n\n  onGetBranchShowSuccess(data) {\n    this.parent_id = data[0].parent_id;\n    this.title = data[0].title;\n    this.body = data[0].body;\n    this.branches = data[1];\n  }\n\n  onGetBranchShowFail(jqXhr) {\n    toastr.error(jqXhr.responseJSON.message);\n  }\n\n}\n\nexport default alt.createStore(BranchShowStore);","import alt from '../alt';\nimport NavbarActions from '../actions/NavbarActions';\n\nclass NavbarStore {\n  constructor() {\n    this.bindActions(NavbarActions);\n    this.totalCharacters = 0;\n    this.onlineUsers = 0;\n    this.searchQuery = '';\n    this.ajaxAnimationClass = '';\n  }\n\n  onFindCharacterSuccess(payload) {\n    payload.history.pushState(null, '/characters/' + payload.characterId);\n  }\n\n  onFindCharacterFail(payload) {\n    payload.searchForm.classList.add('shake');\n    setTimeout(() => {\n      payload.searchForm.classList.remove('shake');\n    }, 1000);\n  }\n\n  onUpdateOnlineUsers(data) {\n    this.onlineUsers = data.onlineUsers;\n  }\n\n  onUpdateAjaxAnimation(className) {\n    this.ajaxAnimationClass = className; //fadein or fadeout\n  }\n\n  onUpdateSearchQuery(event) {\n    this.searchQuery = event.target.value;\n  }\n\n  onGetCharacterCountSuccess(data) {\n    this.totalCharacters = data.count;\n  }\n\n  onGetCharacterCountFail(jqXhr) {\n    toastr.error(jqXhr.responseJSON.message);\n  }\n}\n\nexport default alt.createStore(NavbarStore);","import alt from '../alt';\nimport TrunkShowActions from '../actions/TrunkShowActions';\n\nclass TrunkShowStore {\n  constructor() {\n    this.bindActions(TrunkShowActions);\n    this.trunkId = 0;\n    this.title = 'TBD';\n    this.body = 'TBD';\n    this.branches = [];\n  }\n\n  onGetTrunkShowSuccess(data) {\n    this.title = data[0].title;\n    this.body = data[0].body;\n    this.branches = data[1];\n  }\n\n  onGetTrunkShowFail(jqXhr) {\n    toastr.error(jqXhr.responseJSON.message);\n  }\n\n}\n\nexport default alt.createStore(TrunkShowStore);","import alt from '../alt';\nimport TrunkActions from '../actions/TrunkActions';\n\nclass TrunkStore {\n  constructor() {\n    this.bindActions(TrunkActions);\n    this.trunks = [];\n  }\n\n  onGetTrunksSuccess(data) {\n    this.trunks = data;\n  }\n\n  onGetTrunksFail(errorMessage) {\n    toastr.error(errorMessage);\n  }\n\n}\n\nexport default alt.createStore(TrunkStore);\n","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","/**\n * Indicates that navigation was caused by a call to history.push.\n */\n'use strict';\n\nexports.__esModule = true;\nvar PUSH = 'PUSH';\n\nexports.PUSH = PUSH;\n/**\n * Indicates that navigation was caused by a call to history.replace.\n */\nvar REPLACE = 'REPLACE';\n\nexports.REPLACE = REPLACE;\n/**\n * Indicates that navigation was caused by some other action such\n * as using a browser's back/forward buttons and/or manually manipulating\n * the URL in a browser's location bar. This is the default.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate\n * for more information.\n */\nvar POP = 'POP';\n\nexports.POP = POP;\nexports['default'] = {\n  PUSH: PUSH,\n  REPLACE: REPLACE,\n  POP: POP\n};","\"use strict\";\n\nexports.__esModule = true;\nexports.loopAsync = loopAsync;\n\nfunction loopAsync(turns, work, callback) {\n  var currentTurn = 0;\n  var isDone = false;\n\n  function done() {\n    isDone = true;\n    callback.apply(this, arguments);\n  }\n\n  function next() {\n    if (isDone) return;\n\n    if (currentTurn < turns) {\n      work.call(this, currentTurn++, next, done);\n    } else {\n      done.apply(this, arguments);\n    }\n  }\n\n  next();\n}","/*eslint-disable no-empty */\n'use strict';\n\nexports.__esModule = true;\nexports.saveState = saveState;\nexports.readState = readState;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar KeyPrefix = '@@History/';\nvar QuotaExceededError = 'QuotaExceededError';\nvar SecurityError = 'SecurityError';\n\nfunction createKey(key) {\n  return KeyPrefix + key;\n}\n\nfunction saveState(key, state) {\n  try {\n    window.sessionStorage.setItem(createKey(key), JSON.stringify(state));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;\n\n      return;\n    }\n\n    if (error.name === QuotaExceededError && window.sessionStorage.length === 0) {\n      // Safari \"private mode\" throws QuotaExceededError.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;\n\n      return;\n    }\n\n    throw error;\n  }\n}\n\nfunction readState(key) {\n  var json = undefined;\n  try {\n    json = window.sessionStorage.getItem(createKey(key));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;\n\n      return null;\n    }\n  }\n\n  if (json) {\n    try {\n      return JSON.parse(json);\n    } catch (error) {\n      // Ignore invalid JSON.\n    }\n  }\n\n  return null;\n}","'use strict';\n\nexports.__esModule = true;\nexports.addEventListener = addEventListener;\nexports.removeEventListener = removeEventListener;\nexports.getHashPath = getHashPath;\nexports.replaceHashPath = replaceHashPath;\nexports.getWindowPath = getWindowPath;\nexports.go = go;\nexports.getUserConfirmation = getUserConfirmation;\nexports.supportsHistory = supportsHistory;\nexports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;\n\nfunction addEventListener(node, event, listener) {\n  if (node.addEventListener) {\n    node.addEventListener(event, listener, false);\n  } else {\n    node.attachEvent('on' + event, listener);\n  }\n}\n\nfunction removeEventListener(node, event, listener) {\n  if (node.removeEventListener) {\n    node.removeEventListener(event, listener, false);\n  } else {\n    node.detachEvent('on' + event, listener);\n  }\n}\n\nfunction getHashPath() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  return window.location.href.split('#')[1] || '';\n}\n\nfunction replaceHashPath(path) {\n  window.location.replace(window.location.pathname + window.location.search + '#' + path);\n}\n\nfunction getWindowPath() {\n  return window.location.pathname + window.location.search + window.location.hash;\n}\n\nfunction go(n) {\n  if (n) window.history.go(n);\n}\n\nfunction getUserConfirmation(message, callback) {\n  callback(window.confirm(message));\n}\n\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586\n */\n\nfunction supportsHistory() {\n  var ua = navigator.userAgent;\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {\n    return false;\n  }\n  // FIXME: Work around our browser history not working correctly on Chrome\n  // iOS: https://github.com/rackt/react-router/issues/2565\n  if (ua.indexOf('CriOS') !== -1) {\n    return false;\n  }\n  return window.history && 'pushState' in window.history;\n}\n\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\n\nfunction supportsGoWithoutReloadUsingHash() {\n  var ua = navigator.userAgent;\n  return ua.indexOf('Firefox') === -1;\n}","'use strict';\n\nexports.__esModule = true;\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nexports.canUseDOM = canUseDOM;","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _Actions = require('./Actions');\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _DOMStateStorage = require('./DOMStateStorage');\n\nvar _createDOMHistory = require('./createDOMHistory');\n\nvar _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\n/**\n * Creates and returns a history object that uses HTML5's history API\n * (pushState, replaceState, and the popstate event) to manage history.\n * This is the recommended method of managing history in browsers because\n * it provides the cleanest URLs.\n *\n * Note: In browsers that do not support the HTML5 history API full\n * page reloads will be used to preserve URLs.\n */\nfunction createBrowserHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;\n\n  var forceRefresh = options.forceRefresh;\n\n  var isSupported = _DOMUtils.supportsHistory();\n  var useRefresh = !isSupported || forceRefresh;\n\n  function getCurrentLocation(historyState) {\n    historyState = historyState || window.history.state || {};\n\n    var path = _DOMUtils.getWindowPath();\n    var _historyState = historyState;\n    var key = _historyState.key;\n\n    var state = undefined;\n    if (key) {\n      state = _DOMStateStorage.readState(key);\n    } else {\n      state = null;\n      key = history.createKey();\n\n      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null, path);\n    }\n\n    var location = _parsePath2['default'](path);\n\n    return history.createLocation(_extends({}, location, { state: state }), undefined, key);\n  }\n\n  function startPopStateListener(_ref) {\n    var transitionTo = _ref.transitionTo;\n\n    function popStateListener(event) {\n      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.\n\n      transitionTo(getCurrentLocation(event.state));\n    }\n\n    _DOMUtils.addEventListener(window, 'popstate', popStateListener);\n\n    return function () {\n      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);\n    };\n  }\n\n  function finishTransition(location) {\n    var basename = location.basename;\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n    var state = location.state;\n    var action = location.action;\n    var key = location.key;\n\n    if (action === _Actions.POP) return; // Nothing to do.\n\n    _DOMStateStorage.saveState(key, state);\n\n    var path = (basename || '') + pathname + search + hash;\n    var historyState = {\n      key: key\n    };\n\n    if (action === _Actions.PUSH) {\n      if (useRefresh) {\n        window.location.href = path;\n        return false; // Prevent location update.\n      } else {\n          window.history.pushState(historyState, null, path);\n        }\n    } else {\n      // REPLACE\n      if (useRefresh) {\n        window.location.replace(path);\n        return false; // Prevent location update.\n      } else {\n          window.history.replaceState(historyState, null, path);\n        }\n    }\n  }\n\n  var history = _createDOMHistory2['default'](_extends({}, options, {\n    getCurrentLocation: getCurrentLocation,\n    finishTransition: finishTransition,\n    saveState: _DOMStateStorage.saveState\n  }));\n\n  var listenerCount = 0,\n      stopPopStateListener = undefined;\n\n  function listenBefore(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listenBefore(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  function listen(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listen(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    history.registerTransitionHook(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    history.unregisterTransitionHook(hook);\n\n    if (--listenerCount === 0) stopPopStateListener();\n  }\n\n  return _extends({}, history, {\n    listenBefore: listenBefore,\n    listen: listen,\n    registerTransitionHook: registerTransitionHook,\n    unregisterTransitionHook: unregisterTransitionHook\n  });\n}\n\nexports['default'] = createBrowserHistory;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _createHistory = require('./createHistory');\n\nvar _createHistory2 = _interopRequireDefault(_createHistory);\n\nfunction createDOMHistory(options) {\n  var history = _createHistory2['default'](_extends({\n    getUserConfirmation: _DOMUtils.getUserConfirmation\n  }, options, {\n    go: _DOMUtils.go\n  }));\n\n  function listen(listener) {\n    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;\n\n    return history.listen(listener);\n  }\n\n  return _extends({}, history, {\n    listen: listen\n  });\n}\n\nexports['default'] = createDOMHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _deepEqual = require('deep-equal');\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nvar _AsyncUtils = require('./AsyncUtils');\n\nvar _Actions = require('./Actions');\n\nvar _createLocation2 = require('./createLocation');\n\nvar _createLocation3 = _interopRequireDefault(_createLocation2);\n\nvar _runTransitionHook = require('./runTransitionHook');\n\nvar _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nvar _deprecate = require('./deprecate');\n\nvar _deprecate2 = _interopRequireDefault(_deprecate);\n\nfunction createRandomKey(length) {\n  return Math.random().toString(36).substr(2, length);\n}\n\nfunction locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search &&\n  //a.action === b.action && // Different action !== location change.\n  a.key === b.key && _deepEqual2['default'](a.state, b.state);\n}\n\nvar DefaultKeyLength = 6;\n\nfunction createHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n  var getCurrentLocation = options.getCurrentLocation;\n  var finishTransition = options.finishTransition;\n  var saveState = options.saveState;\n  var go = options.go;\n  var keyLength = options.keyLength;\n  var getUserConfirmation = options.getUserConfirmation;\n\n  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;\n\n  var transitionHooks = [];\n\n  function listenBefore(hook) {\n    transitionHooks.push(hook);\n\n    return function () {\n      transitionHooks = transitionHooks.filter(function (item) {\n        return item !== hook;\n      });\n    };\n  }\n\n  var allKeys = [];\n  var changeListeners = [];\n  var location = undefined;\n\n  function getCurrent() {\n    if (pendingLocation && pendingLocation.action === _Actions.POP) {\n      return allKeys.indexOf(pendingLocation.key);\n    } else if (location) {\n      return allKeys.indexOf(location.key);\n    } else {\n      return -1;\n    }\n  }\n\n  function updateLocation(newLocation) {\n    var current = getCurrent();\n\n    location = newLocation;\n\n    if (location.action === _Actions.PUSH) {\n      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);\n    } else if (location.action === _Actions.REPLACE) {\n      allKeys[current] = location.key;\n    }\n\n    changeListeners.forEach(function (listener) {\n      listener(location);\n    });\n  }\n\n  function listen(listener) {\n    changeListeners.push(listener);\n\n    if (location) {\n      listener(location);\n    } else {\n      var _location = getCurrentLocation();\n      allKeys = [_location.key];\n      updateLocation(_location);\n    }\n\n    return function () {\n      changeListeners = changeListeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }\n\n  function confirmTransitionTo(location, callback) {\n    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {\n      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {\n        if (result != null) {\n          done(result);\n        } else {\n          next();\n        }\n      });\n    }, function (message) {\n      if (getUserConfirmation && typeof message === 'string') {\n        getUserConfirmation(message, function (ok) {\n          callback(ok !== false);\n        });\n      } else {\n        callback(message !== false);\n      }\n    });\n  }\n\n  var pendingLocation = undefined;\n\n  function transitionTo(nextLocation) {\n    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.\n\n    pendingLocation = nextLocation;\n\n    confirmTransitionTo(nextLocation, function (ok) {\n      if (pendingLocation !== nextLocation) return; // Transition was interrupted.\n\n      if (ok) {\n        // treat PUSH to current path like REPLACE to be consistent with browsers\n        if (nextLocation.action === _Actions.PUSH) {\n          var prevPath = createPath(location);\n          var nextPath = createPath(nextLocation);\n\n          if (nextPath === prevPath) nextLocation.action = _Actions.REPLACE;\n        }\n\n        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);\n      } else if (location && nextLocation.action === _Actions.POP) {\n        var prevIndex = allKeys.indexOf(location.key);\n        var nextIndex = allKeys.indexOf(nextLocation.key);\n\n        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.\n      }\n    });\n  }\n\n  function push(location) {\n    transitionTo(createLocation(location, _Actions.PUSH, createKey()));\n  }\n\n  function replace(location) {\n    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  function createKey() {\n    return createRandomKey(keyLength);\n  }\n\n  function createPath(location) {\n    if (location == null || typeof location === 'string') return location;\n\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n\n    var result = pathname;\n\n    if (search) result += search;\n\n    if (hash) result += hash;\n\n    return result;\n  }\n\n  function createHref(location) {\n    return createPath(location);\n  }\n\n  function createLocation(location, action) {\n    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];\n\n    if (typeof action === 'object') {\n      //warning(\n      //  false,\n      //  'The state (2nd) argument to history.createLocation is deprecated; use a ' +\n      //  'location descriptor instead'\n      //)\n\n      if (typeof location === 'string') location = _parsePath2['default'](location);\n\n      location = _extends({}, location, { state: action });\n\n      action = key;\n      key = arguments[3] || createKey();\n    }\n\n    return _createLocation3['default'](location, action, key);\n  }\n\n  // deprecated\n  function setState(state) {\n    if (location) {\n      updateLocationState(location, state);\n      updateLocation(location);\n    } else {\n      updateLocationState(getCurrentLocation(), state);\n    }\n  }\n\n  function updateLocationState(location, state) {\n    location.state = _extends({}, location.state, state);\n    saveState(location.key, location.state);\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    transitionHooks = transitionHooks.filter(function (item) {\n      return item !== hook;\n    });\n  }\n\n  // deprecated\n  function pushState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    push(_extends({ state: state }, path));\n  }\n\n  // deprecated\n  function replaceState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    replace(_extends({ state: state }, path));\n  }\n\n  return {\n    listenBefore: listenBefore,\n    listen: listen,\n    transitionTo: transitionTo,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    createKey: createKey,\n    createPath: createPath,\n    createHref: createHref,\n    createLocation: createLocation,\n\n    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),\n    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),\n    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),\n    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),\n    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')\n  };\n}\n\nexports['default'] = createHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _Actions = require('./Actions');\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nfunction createLocation() {\n  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];\n  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];\n  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n\n  if (typeof location === 'string') location = _parsePath2['default'](location);\n\n  if (typeof action === 'object') {\n    //warning(\n    //  false,\n    //  'The state (2nd) argument to createLocation is deprecated; use a ' +\n    //  'location descriptor instead'\n    //)\n\n    location = _extends({}, location, { state: action });\n\n    action = key || _Actions.POP;\n    key = _fourthArg;\n  }\n\n  var pathname = location.pathname || '/';\n  var search = location.search || '';\n  var hash = location.hash || '';\n  var state = location.state || null;\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash,\n    state: state,\n    action: action,\n    key: key\n  };\n}\n\nexports['default'] = createLocation;\nmodule.exports = exports['default'];","//import warning from 'warning'\n\n\"use strict\";\n\nexports.__esModule = true;\nfunction deprecate(fn) {\n  return fn;\n  //return function () {\n  //  warning(false, '[history] ' + message)\n  //  return fn.apply(this, arguments)\n  //}\n}\n\nexports[\"default\"] = deprecate;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\nfunction extractPath(string) {\n  var match = string.match(/^https?:\\/\\/[^\\/]*/);\n\n  if (match == null) return string;\n\n  return string.substring(match[0].length);\n}\n\nexports[\"default\"] = extractPath;\nmodule.exports = exports[\"default\"];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _extractPath = require('./extractPath');\n\nvar _extractPath2 = _interopRequireDefault(_extractPath);\n\nfunction parsePath(path) {\n  var pathname = _extractPath2['default'](path);\n  var search = '';\n  var hash = '';\n\n  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like \"%s\"', path) : undefined;\n\n  var hashIndex = pathname.indexOf('#');\n  if (hashIndex !== -1) {\n    hash = pathname.substring(hashIndex);\n    pathname = pathname.substring(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf('?');\n  if (searchIndex !== -1) {\n    search = pathname.substring(searchIndex);\n    pathname = pathname.substring(0, searchIndex);\n  }\n\n  if (pathname === '') pathname = '/';\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash\n  };\n}\n\nexports['default'] = parsePath;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction runTransitionHook(hook, location, callback) {\n  var result = hook(location, callback);\n\n  if (hook.length < 2) {\n    // Assume the hook runs synchronously and automatically\n    // call the callback with the return value.\n    callback(result);\n  } else {\n    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not \"return\" in a transition hook with a callback argument; call the callback instead') : undefined;\n  }\n}\n\nexports['default'] = runTransitionHook;\nmodule.exports = exports['default'];","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' +\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}